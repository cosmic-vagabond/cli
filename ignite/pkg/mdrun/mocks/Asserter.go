// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mdrun "github.com/ignite/cli/ignite/pkg/mdrun"
	mock "github.com/stretchr/testify/mock"
)

// Asserter is an autogenerated mock type for the Asserter type
type Asserter struct {
	mock.Mock
}

type Asserter_Expecter struct {
	mock *mock.Mock
}

func (_m *Asserter) EXPECT() *Asserter_Expecter {
	return &Asserter_Expecter{mock: &_m.Mock}
}

// Assert provides a mock function with given fields: _a0
func (_m *Asserter) Assert(_a0 mdrun.Instruction) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(mdrun.Instruction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Asserter_Assert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Assert'
type Asserter_Assert_Call struct {
	*mock.Call
}

// Assert is a helper method to define mock.On call
//   - _a0 mdrun.Instruction
func (_e *Asserter_Expecter) Assert(_a0 interface{}) *Asserter_Assert_Call {
	return &Asserter_Assert_Call{Call: _e.mock.On("Assert", _a0)}
}

func (_c *Asserter_Assert_Call) Run(run func(_a0 mdrun.Instruction)) *Asserter_Assert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(mdrun.Instruction))
	})
	return _c
}

func (_c *Asserter_Assert_Call) Return(_a0 error) *Asserter_Assert_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAsserter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAsserter creates a new instance of Asserter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAsserter(t mockConstructorTestingTNewAsserter) *Asserter {
	mock := &Asserter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
